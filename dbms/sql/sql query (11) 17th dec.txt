
-- assign the ranks based on ratings alog with rental_durations
select rating, rental_duration ,
rank() over (partition by rating order by rental_duration) as rankings
from film;

-- Retrieve the top 5 films with the highest rental rates, displaying the film title, rental rate, and the average rental
-- rate for all films. Use window functions to rank the films based on their rental rates.

select title, rental_rate,
avg(rental_rate) over(),
rank() over(order by rental_rate asc)
from film 
order by rental_rate desc
limit 5;

-- Find the total number of rentals for each customer, along with their  -- 3:27 - 3:32
-- individual rental counts and the average number of rentals across all customers. -- rental == customer_id , count(rental) , avg(count())
-- add new column with individual having higher value than avg is marked higher or else lower
-- give me the list of people who rented movies higher than average -- 3:36 - 3:40
select customer_id , count(rental_id) as total_count, avg(count(rental_id)) over() as avg_count,
 case when count(rental_id) - avg(count(rental_id)) over() > 0 then "higher" else "lower"  end count_stats
from rental group by customer_id order by count_stats;

-- Find the films that have been rented the least number of times. Display the film 
-- title, rental count, and the average rental count across all films.
-- from - join - where - group by - having - select - order by - limit
select title , count(rental_id) as no_of_rental, avg(count(rental_id)) over() from
film f left join inventory i on f.film_id = i.film_id
left join rental r on r.inventory_id = i.inventory_id group by title order by no_of_rental;

-- Display the title and rental duration of films from the database, 
-- alongside the title and rental duration of the subsequent film (using LEAD function) 

select title , rental_duration , lag(title, 7) over(order by rental_duration),
lag(rental_duration, 2) over(order by rental_duration)  from film;

-- lag -- when you want to compare performance on weekly bases 


-- function - string , numeric , date function , aggregate , window functions

select concat(first_name , " " , last_name) from actor;


-- user defined functions
-- create a function to get a squared value


 
-- SET GLOBAL log_bin_trust_function_creators = 1;
-- delimiter //

-- create function squared (num int)
-- returns int
-- begin
-- declare result int;
-- set result = num*num;
-- return result;
-- end //

-- delimiter ;

select squared(5);
